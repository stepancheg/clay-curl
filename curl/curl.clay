import pointers.*;
public import curl.h.*;

record CurlException (operation: StringConstant, message: CStringRef);

overload printTo(stream, ce: CurlException) {
    printTo(stream, CurlException, ": failed to call ", ce.operation, ": ", ce.message);
}

instance Exception (CurlException);

private alias WriteFunction = Lambda[[Pointer[Char], SizeT], [SizeT]];
private alias HeaderFunction = WriteFunction;

record Curl (
    curl: Pointer[CURL],
    writeFunction: WriteFunction,
    headerFunction: HeaderFunction,
);

overload RegularRecord?(static Curl) = false;

overload Curl() {
    var curlCurl = curl_easy_init();
    if (null?(curlCurl)) {
        throw CurlException("curl_easy_init", CStringRef(cstring("failed to initialize curl_easy")));
    }
    return Curl(curlCurl, WriteFunction(), HeaderFunction());
}

overload destroy(curl: Curl) {
    curl_easy_cleanup(curl.curl);
}


curlEasyReset(curl: Curl) {
    curl_easy_reset(curl.curl);
    curl.writeFunction = WriteFunction();
    curl.headerFunction = HeaderFunction();
}


/// call given function and throw exception if it failed
[Code | CCodePointer?(Code)]
private callHandleError(code: Code, op: StringConstant, ..args) {
    var r = call(code, ..args);
    if (r != CURLE_OK) {
        throw CurlException(op, CStringRef(curl_easy_strerror(r)));
    }
}

private define curlEasySetoptParamConvert(p);

[L | Integer?(L) or L == Bool]
overload curlEasySetoptParamConvert(l: L) = CLong(l);
[S | CCompatibleString?(S)]
overload curlEasySetoptParamConvert(s: S) = cstring(s);
[T]
overload curlEasySetoptParamConvert(p: Pointer[T]) = p;
[C | CCodePointer?(C)]
overload curlEasySetoptParamConvert(c: C) = c;

/// generic curl_easy_setopt wrapper
/// note value parameter must much option type, as described in curl manual
/// http://curl.haxx.se/libcurl/c/curl_easy_setopt.html
/// otherwise behaviour is unspecified
curlEasySetopt(curl: Curl, opt, value) {
    callHandleError(curl_easy_setopt, "curl_easy_setopt", curl.curl, opt, curlEasySetoptParamConvert(value));
}

/// shortcut to set CURLOPT_VERBOSE
curlEasySetVerbose(curl: Curl, verbose: Bool) =
    ..curlEasySetopt(curl, CURLOPT_VERBOSE, verbose);

/// shortcur to set CURLOPT_FAILONERROR
curlEasySetFailOnError(curl: Curl, fail: Bool) =
    ..curlEasySetopt(curl, CURLOPT_FAILONERROR, fail);

/// trampoline is used to "convert" curl callback call into closure call
private writeFunctionTrampoline(ptr: Pointer[CChar], size: SizeT, nmemb: SizeT, userData: OpaquePointer): SizeT {
    var curl = Pointer[Curl](userData);
    return curl^.writeFunction(Pointer[Char](ptr), size * nmemb);
}

/// set function that is used to handle response body
/// writeFunction must be compatibe with WriteFunction function holder
curlEasySetWriteFunction(curl, writeFunction) {
    curl.writeFunction = WriteFunction(writeFunction);
    
    var trampolinePointer = makeCCodePointer(writeFunctionTrampoline, Pointer[CChar], SizeT, SizeT, OpaquePointer);
    curlEasySetopt(curl, CURLOPT_FILE, &curl);
    curlEasySetopt(curl, CURLOPT_WRITEFUNCTION, trampolinePointer);
}

/// ignore response output (by default libcurl writes response to stdout)
curlEasySetWriteToDevNull(curl) =
    ..curlEasySetWriteFunction(curl, (data, size) -> size);

/// write response to given stream
/// note that String record is compatible with stream protocol
curlEasySetWriteTo(curl, ref stream) =
    ..curlEasySetWriteFunction(curl, (data, size) -> {
        printTo(stream, CoordinateRange(data, data + size)); return size;
    });

/// similar to writeFunctionTrampoline
private headerFunctionTrampoline(ptr: Pointer[CChar], size: SizeT, nmemb: SizeT, userData: OpaquePointer): SizeT {
    var curl = Pointer[Curl](userData);
    return curl^.headerFunction(Pointer[Char](ptr), size * nmemb);
}

/// call headerFunction once for each header
/// headerFunction must be compatible with HeaderFunction function holder
curlEasySetHeaderFunction(curl, headerFunction) {
    curl.headerFunction = HeaderFunction(headerFunction);
    
    var trampolinePointer = makeCCodePointer(headerFunctionTrampoline, Pointer[CChar], SizeT, SizeT, OpaquePointer);
    curlEasySetopt(curl, CURLOPT_WRITEHEADER, &curl);
    curlEasySetopt(curl, CURLOPT_HEADERFUNCTION, trampolinePointer);
}

/// shortcut to set CURLOPT_URL
curlEasySetUrl(curl, url) =
    ..curlEasySetopt(curl, CURLOPT_URL, url);

/// shortcut to set CURLOPT_USERAGENT
curlEasySetUserAgent(curl, userAgent) =
    ..curlEasySetopt(curl, CURLOPT_USERAGENT, userAgent);

/// wrapper around curl_easy_perform
curlEasyPerform(curl: Curl) {
    callHandleError(curl_easy_perform, "curl_easy_perform", curl.curl);
}

/// wrapper around curl_easy_getinfo
/// note that Type must match info request
/// otherwize behaviour is unspecified
/// see http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html
/// the list of possible options
[Type]
private curlEasyGetInfoImpl(curl: Curl, info, static Type) {
    // TODO: do not initialize
    var r = Type();
    callHandleError(curl_easy_getinfo, "curl_easy_getinfo", curl.curl, info, &r);
    return r;
}

/// see curlEasyGetInfoImpl
curlEasyGetInfoLong(curl: Curl, info) =
    curlEasyGetInfoImpl(curl, info, CLong);

/// see curlEasyGetInfoImpl
curlEasyGetInfoCString(curl: Curl, info) =
    curlEasyGetInfoImpl(curl, info, CStringRef);

/// see curlEasyGetInfoImpl
curlEasyGetInfoDouble(curl: Curl, info) =
    curlEasyGetInfoImpl(curl, info, CDouble);

/// shortcut to fetch CURLINFO_RESPONSE_CODE
curlEasyGetResponseCode(curl) =
    Int(curlEasyGetInfoLong(curl, CURLINFO_RESPONSE_CODE));


/// wrapper around curl_easy_escape
curlEasyEscape(curl: Curl, url) {
    var r = curl_easy_escape(curl.curl, Pointer[CChar](begin(url)), Int(size(url)));
    finally curl_free(OpaquePointer(r));
    return String(r);
}

/// wrapper around curl_easy_unescape
curlEasyUnescape(curl: Curl, url) {
    var rs = 0;
    var r = curl_easy_unescape(curl.curl, Pointer[CChar](begin(url)), Int(size(url)), &rs);
    finally curl_free(OpaquePointer(r));
    return String(CoordinateRange(r, r + rs));
}


/// get curl version
curlVersion() = CStringRef(curl_version());
