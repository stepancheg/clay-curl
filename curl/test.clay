import test.*;
import libc.*;

import curl.*;
import curl.h.*;

[C | C == Char]
overload String(p: Pointer[C], len) =
    String(CoordinateRange(p, p + len));


curlTestSuite() =
    TestSuite(
        "curl", array(
            TestCase("curlVersion", test => {
                var version = curlVersion();
                expectTrue(test, version, in?(version, "libcurl/"));
            }),
            TestCase("curlEasyEscape", test => {
                var curl = Curl();
                expectEqual(test, "escaped", String("abc%5E%25"), curlEasyEscape(curl, "abc^%"));
                expectEqual(test, "escaped with 0s", String("a%00bc%5E%25"), curlEasyEscape(curl, "a\x00bc^%"));
            }),
            TestCase("curlEasyUnescape", test => {
                var curl = Curl();
                expectEqual(test, "unescaped", String("abc^%"), curlEasyUnescape(curl, "abc%5E%25"));
                expectEqual(test, "unescaped with 0s", String("a\x00bc^%"), curlEasyUnescape(curl, "a%00bc%5E%25"));
            }),
            TestCase("curlEasyWriteHeader", test => {
                var curl = Curl();
                curlEasySetUrl(curl, "http://ya.ru");
                curlEasySetWriteToDevNull(curl);
                var metLastModified = false;
                curlEasySetHeaderFunction(curl, (data, len) -> {
                    var header = String(data, len);
                    metLastModified = metLastModified or beginsWith?(header, "Last-Modified:");
                    return len;
                });
                curlEasyPerform(curl);
                expectEqual(test, "200", 200, curlEasyGetResponseCode(curl));
                expectTrue(test, "met Last-Modified", metLastModified);
            }),
            TestCase("curlEasySetWriteTo", test => {
                var curl = Curl();
                curlEasySetUrl(curl, "http://ya.ru");
                var s = String();
                curlEasySetWriteTo(curl, s);
                curlEasyPerform(curl);
                expectEqual(test, "200", 200, curlEasyGetResponseCode(curl));
                expectTrue(test, "contains </body>", in?(s, "</body>"));
            }),
        ),
    );


curlTestMain() = testMain(curlTestSuite());

main() = curlTestMain();

